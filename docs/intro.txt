svviz
=====

.. image:: example.png
    :width: 80%
    :align: center

``svviz`` visualizes high-throughput sequencing data that supports a structural variant.

The program takes as input one or several bam files with sequencing data, a genome fasta file, information about a putative structural variant (that has been identified using other methods), and (optionally) a bed file with genomic annotations. From these inputs, ``svviz`` uses a realignment process to identify reads supporting the reference allele, reads supporting the structural variant (or alternate allele), and reads that are not informative one way or the other (ambiguous).

Reads are then plotted, as in a standard genome browser, but along the sequence of either the alternate allele or the reference allele. The user can thus assess the support for the putative structural variant visually, determine if the breakpoints appear accurate, or estimate a likely genotype for each sample at the given structural variant.

``svviz`` differs from existing genome browsers in being able to display arbitrary types of structural variants, such as large insertions, deletions, inversions and translocations. Genome browsers such as IGV are poorly suited to displaying the read data supporting these types of structural variants, which can differ dramatically from the reference genome sequence. 


Quick-start
-----------

0. [OS X only] Ensure that you have a working compiler by following `these instructions <http://railsapps.github.io/xcode-command-line-tools.html>`_.
1. Install the latest version of svviz from github using the following terminal command: ``sudo pip install git+https://github.com/svviz/svviz.git#svviz``. (The sudo may not be necessary depending on your setup.)
2. Run the following command: ``svviz demo``. After several processing steps, a web browser window should open with an example structural variant.
3. Please report any issues using the `github issue tracker <https://github.com/svviz/svviz/issues>`_.



Features
--------

* built-in support for:
    * deletions
    * insertions (including mobile element insertions)
    * inversions
    * ``svviz`` can easily be extended to analyze translocations and complex variants, but these types are not yet implemented.
* builds reference and alternate allele sequences from genome fasta file and structural variant annotation
* identifies, from the input bam file(s), which reads (both read ends for paired-end sequencing) are likely to be relevant for the given structural variant
* performs Smith-Waterman realignment of all read segments against both alternate and reference allele sequences
* uses alignment score to determine reads supporting reference or alternate allele
* additionally, uses empirical insert-size distribution (rather than mean and stddev) to assign reads as likely derived from alternate or reference allele
* visualizes reads for multiple samples in SVG format (an open-source, web-standard vector graphics format)
* provides a (locally-running) browser-based front-end for inspecting visualizations


Tutorial
--------

The following is a gentler, step-by-step guide to using ``svviz``.

**Installation** A single command should typically suffice to install ``svviz``:

``pip install git+https://github.com/svviz/svviz.git#svviz``

If that command gives a permissions error, you can try adding ``sudo`` to the beginnning of the command in order to run the command as super-user (often required for a system-wide installation). If you get an error that ``pip`` is missing, assuming python is already installed, you can run ``sudo easy_install pip`` and then run the above command.

``svviz`` requires several python packages in order to run properly. During a normal installation, these packages should be installed automatically:

- flask
- joblib
- numpy
- pyfaidx
- pysam
- requests

Finally, in order to export the visualizations into PDF or PNG format, you will need to install libRsvg. On the Mac, first install and update `homebrew <http://brew.sh>`_ and then run ``brew install librsvg``; on linux (ubuntu and similar), you can run ``sudo apt-get install librsvg2-dev``.

**Running in demo mode** Several example datasets can be downloaded and run directly from ``svviz``. This is a good step to perform in order to make sure everything is installed correctly:

``svviz demo``

(Additional demos can be run as ``svviz demo 2``, ``svviz demo 3``, etc.)

This will prompt you if you would like to download the example datasets into the current working directory. If you type ``y`` to indicate yes, the data will be downloaded, then automatically analyzed and visualized in your web browser. The first line of output (following the download) shows the command line arguments used to analyze the demo; if you wish to play around with parameters (for example adding or removing datasets, or refining the breakpoints), you can copy and edit this command.

Subsequent lines of output will indicate progress of ``svviz`` as it processes the data. Once processing is complete (should typically take <30secs-1min), a ``svviz`` will create a local web-server (accessible only from within your computer) and open your default web browser to a page displaying the example structural variant.


**Browser interface** The web browser view provides a convenient interface to examine the visualizations produced by ``svviz``. The top shows some information about the structural variant that is being visualized, including type and genomic coordinates, as well as summaries of read counts in each category.

.. figure:: ref_example.png
    :width: 80%
    :align: center

    Example view of the reference allele. Breakpoints are indicated by thin vertical lines.

Below the overview information at the top, the visualization is split into three parts: "Alt", "Ref" and "Amb". Reads aligning better to the alternate allele than the reference allele will be shown in the first set of tracks, whereas those aligning better to the reference allele will be shown in the middle set of tracks. At the bottom, in the "Amb" section, are reads that align poorly to both alleles, or equally well to both alleles, and hence do not provide evidence for or against the structural variant being analyzed. These reads are shown aligned against the reference sequence, and typically include reads that map near the structural variant breakpoints but do not map across the breakpoints.


.. figure:: axis.png
    :width: 80%
    :align: center

    Axis for inversion (Alt allele).

An axis is shown below each section, showing the scale in basepairs, as well as indicating the positioning of the breakpoints and the orientation of each region between breakpoints (large arrows). Coloring of the segments is consistent between Alt, Ref and Amb sections, so for example the first demonstration, which analyzes an inversion on chromosome 4, displays three colored bars: red, blue and then grey. The blue segment in the middle indicates the inverted region, and hence the arrows point to the left in the Alt section but to the right in the Ref section. Breakpoints are indicated as vertical lines through all the tracks.

TODO: implement buttons for zooming

Zooming can be accomplished by clicking the plus or minus buttons (not yet implemented), or by holding down the option (Mac) or alt (linux) key and spinning the scroll wheel while hovering over a track. If you hover your mouse over a read, the nucleotide-level alignment(s) will be shown for the read (or read-pair), along with some information about the length of the aligned read (or read pairs) and the reason the read (pair) was assigned to a given allele.

Scrolling using the scroll-wheel or panning by clicking and dragging pans all tracks simultaneously, whereas using the vertical scrollbars only scrolls the track of interest. Horizontal scrolling can also be performed using the scroll wheel by holding down shift.

Reads aligning to the minus strand are colored red and those aligning to the plus strand are colored purple. Unsequenced space between read pairs is shown by light gray bars. Overlapping portions of read pairs are shown in a light green color (for example, if the insert size is 250 and 2x150bp sequencing was performed, the middle 50bp would be sequenced from both reads). Mismatches to the sequence of the allele (for example due to single nucleotide polymorphisms or sequencing errors) are shown as colored vertical bars with the width of a nucleotide (ie, you will probably need to zoom in to see them).

**Visualizing your structural variant** To visualize your structural variant of interest, you will need at least the following three pieces of data:

1. Input bam file(s). This bam file must be coordinate sorted and have an index file (sample.bam.bai) in the same directory. You can use `samtools <http://www.htslib.org/download>`_ to sort and index your bam file. Bam files are specified using the ``-b`` command line argument, which can be provided multiple times to load and visualize multiple samples simultaneously.
2. Input genome fasta file. If a .fai index file does not already exist in the directory containing the fasta file, it will be created. This means that, if the .fai file does not already exist, the fasta file needs to be in a directory for which you have write permission. This fasta file is the first required command line argument.
3. The coordinates of the structural variant. The type of event is specified by the ``-t`` command line option. The following four event types are currently supported:

    :Deletions: The format for specifying deletion breakpoints is ``chrom start end``.
    :Inversions: To specify an inverted region, use ``chrom start end``.
    :Insertions: The format for specifying insertions is ``chrom breakpoint <inserted sequence>``.
    :Mobile elements: Mobile element insertions can be specified by ``<mobile_elements.fasta> <chrom> <pos> <ME name> [ME strand [start [end]]]``, where ``<ME name>`` must match the header line from the mobile_elements.fasta file, and strand, start and end are optional coordinates of the relevant portion from the mobile element sequence.

For example, a deletion might be called as:

``svviz -t del -b ~/data/sample1.sorted.bam ~/data/hg19.fasta chr7 153757067 153758235``


**Displaying annotations** Annotation tracks can be loaded and visualized in order to display the position of important nearby genomic regions such as genes or repeat sequences. These need to be provided in standard `BED <http://genome.ucsc.edu/FAQ/FAQformat.html#format1>`_ format (the first 6 columns are required, up to and including strand). Such annotation tracks can easily be downloaded from the `UCSC Genome Browser <http://genome.ucsc.edu>`_, either from the standard annotations provided for each assembly or using their Table Browser tool. Each bed file is specified with the ``--annotations`` option (or ``-A``).

TODO: change default orientation to +-

**Additional options** The default settings are typically correct for paired-end Illumina data. To specify single-ended data, specify the --single-ended option, or use one of the following presets:

- ``--pacbio`` for pacific biosciences sequencing (because PacBio sequencing is typically of lower base-quality than Illumina sequencing, this preset changes the ``--aln-quality`` option as well to retain lower quality alignments as support for the Ref and Alt alleles)
- ``--moleculo`` for Moleculo (now called TruSeq synthetic long reads)
- ``--mate-pair`` which specifies that the orientation of the reads is outward facing (ie -/+) rather than inward facing (ie +/-)

The ``--min-mapq`` option specifies the mapping quality threshold; reads with mapq (this is set during the original genome-wide mapping by bwa, bowtie, etc) below this threshold will be discarded during pre-processing.


**Exporting visualizations** The visualizations can be exported to SVG, PNG or PDF from the web view by clicking the "Export" link at the top of the page. Alternatively, these files can be created directly, without launching the web interface, using the ``--export`` option (and this exported image file can be opened automatically using your system-defined image viewer by additionally specifying the ``--open-exported`` option).



License
-------

``svviz`` is distributed under the MIT license:

  The MIT License (MIT)

  Copyright (c) 2015 Noah Spies

  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


The Smith-Waterman Alignments are performed by the `Complete Striped Smith-Waterman Library <https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library>`_, whose license requires the following statements:
 
  Author: Mengyao Zhao & Wan-Ping Lee

  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

